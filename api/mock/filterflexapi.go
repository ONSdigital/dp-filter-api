// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-filter-api/api"
	"net/http"
	"sync"
)

// Ensure, that FilterFlexAPIMock does implement api.FilterFlexAPI.
// If this is not the case, regenerate this file with moq.
var _ api.FilterFlexAPI = &FilterFlexAPIMock{}

// FilterFlexAPIMock is a mock implementation of api.FilterFlexAPI.
//
// 	func TestSomethingThatUsesFilterFlexAPI(t *testing.T) {
//
// 		// make and configure a mocked api.FilterFlexAPI
// 		mockedFilterFlexAPI := &FilterFlexAPIMock{
// 			ForwardRequestFunc: func(request *http.Request) (*http.Response, error) {
// 				panic("mock out the ForwardRequest method")
// 			},
// 		}
//
// 		// use mockedFilterFlexAPI in code that requires api.FilterFlexAPI
// 		// and then make assertions.
//
// 	}
type FilterFlexAPIMock struct {
	// ForwardRequestFunc mocks the ForwardRequest method.
	ForwardRequestFunc func(request *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// ForwardRequest holds details about calls to the ForwardRequest method.
		ForwardRequest []struct {
			// Request is the request argument value.
			Request *http.Request
		}
	}
	lockForwardRequest sync.RWMutex
}

// ForwardRequest calls ForwardRequestFunc.
func (mock *FilterFlexAPIMock) ForwardRequest(request *http.Request) (*http.Response, error) {
	if mock.ForwardRequestFunc == nil {
		panic("FilterFlexAPIMock.ForwardRequestFunc: method is nil but FilterFlexAPI.ForwardRequest was just called")
	}
	callInfo := struct {
		Request *http.Request
	}{
		Request: request,
	}
	mock.lockForwardRequest.Lock()
	mock.calls.ForwardRequest = append(mock.calls.ForwardRequest, callInfo)
	mock.lockForwardRequest.Unlock()
	return mock.ForwardRequestFunc(request)
}

// ForwardRequestCalls gets all the calls that were made to ForwardRequest.
// Check the length with:
//     len(mockedFilterFlexAPI.ForwardRequestCalls())
func (mock *FilterFlexAPIMock) ForwardRequestCalls() []struct {
	Request *http.Request
} {
	var calls []struct {
		Request *http.Request
	}
	mock.lockForwardRequest.RLock()
	calls = mock.calls.ForwardRequest
	mock.lockForwardRequest.RUnlock()
	return calls
}
